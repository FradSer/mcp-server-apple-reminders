---
description: 
globs: 
alwaysApply: true
---
# MCP Apple Reminders Server - Comprehensive Development Guide

## Project Overview

This is a **Model Context Protocol (MCP) Server** that provides native integration with Apple Reminders on macOS. The project enables AI assistants (Cursor, Claude Desktop, ChatWise) to interact with Apple Reminders through natural language commands via a standardized MCP interface.

### Key Features
- Create new reminders with titles, due dates, notes, and list assignments
- List all reminders or filter by specific lists
- Show completed/incomplete reminders
- Native macOS integration using EventKit framework
- Dual architecture: TypeScript for MCP protocol + Swift for native macOS access

## Architecture & Technology Stack

### Core Technologies
- **Language**: TypeScript 5.8+ with ESNext modules
- **Runtime**: Node.js 18+ 
- **MCP SDK**: @modelcontextprotocol/sdk v1.5.0
- **Schema Validation**: Zod v3.24.2 + ArkType v2.0.4
- **Date Handling**: Moment.js v2.30.1
- **Native Integration**: Swift + EventKit framework
- **Testing**: Jest 29.7+ with ts-jest

### Project Structure
```
src/
├── index.ts                 # Main entry point, server startup
├── server/                  # MCP server implementation
│   ├── server.ts            # Server configuration & initialization
│   └── handlers.ts          # Request handlers registration
├── tools/                   # MCP tools implementation
│   ├── definitions.ts       # Tool schemas & interfaces
│   ├── handlers.ts          # Tool execution handlers
│   └── index.ts             # Tools barrel export
├── utils/                   # Utility modules
│   ├── reminders.ts         # Swift binary integration
│   ├── applescript.ts       # AppleScript execution
│   ├── date.ts              # Date parsing utilities
│   └── logger.js            # Debug logging
├── swift/                   # Native macOS integration
│   ├── GetReminders.swift   # EventKit reminders access
│   ├── build.sh             # Swift compilation script
│   └── bin/                 # Compiled Swift binaries
└── types/                   # TypeScript definitions
    └── index.ts             # Core types & interfaces
```

## Native Integration Architecture

### Dual Approach Design
The project uses a **hybrid integration strategy**:

1. **Swift + EventKit** (for reading data)
   - Uses native `EKEventStore` for accessing reminders
   - Handles authentication and permissions
   - Compiled to binary: `dist/swift/bin/GetReminders`
   - Spawned as child process from TypeScript

2. **AppleScript** (for writing data) 
   - Creates new reminders via `tell application "Reminders"`
   - Handles reminder properties (title, due date, notes, list)
   - Executed via `osascript` command

### Permission Requirements
- **EventKit Access**: Required for reading reminders
- **Automation Access**: Required for AppleScript execution
- **macOS 10.15+**: Minimum version for EventKit APIs
- **Xcode Command Line Tools**: Required for Swift compilation

## MCP Protocol Implementation

### Available Tools

#### 1. `create_reminder`
Creates new reminders with optional parameters.

**Schema:**
```typescript
{
  title: string;           // Required: Reminder title
  dueDate?: string;        // Optional: 'YYYY-MM-DD HH:mm:ss' format
  list?: string;           // Optional: Target reminder list name
  note?: string;           // Optional: Reminder notes/body
}
```

**Implementation:** AppleScript-based creation via `handleCreateReminder()`

#### 2. `list_reminders` 
Lists reminders with filtering options.

**Schema:**
```typescript
{
  list?: string;           // Optional: Filter by list name
  showCompleted?: boolean; // Optional: Include completed reminders
}
```

**Implementation:** Swift binary execution via `handleListReminders()`

#### 3. `list_reminder_lists`
Returns all available reminder lists.

**Schema:** No parameters required

**Implementation:** Swift binary execution via `handleListReminderLists()`

### MCP Server Configuration
- **Transport**: `StdioServerTransport` for command-line integration
- **Capabilities**: Tools, Resources, Prompts
- **Protocol Version**: Latest MCP specification
- **Error Handling**: Structured JSON responses with `isError` flags

## Development Guidelines

### Code Style & Standards

#### TypeScript Configuration
- **Target**: ES2020 with NodeNext modules
- **Strict Mode**: Enabled with full type checking
- **Module Resolution**: NodeNext for ESM compatibility
- **Output**: `./dist` with source maps and declarations

#### Zod Schema Patterns
```typescript
// Use Zod for runtime validation
import { z } from "zod";

const createReminderSchema = z.object({
  title: z.string(),
  dueDate: z.string().optional(),
  list: z.string().optional(),
  note: z.string().optional()
});

// Infer TypeScript types from schemas
type CreateReminderArgs = z.infer<typeof createReminderSchema>;
```

#### Error Handling Patterns
```typescript
// Consistent error response structure
return {
  content: [{
    type: "text",
    text: JSON.stringify({
      error: `Operation failed: ${error.message}`,
      isError: true
    }, null, 2)
  }],
  isError: true
};
```

### Date Handling Best Practices

#### Using Moment.js
```typescript
import moment from "moment";

// Parse flexible date inputs
const parsedDate = moment(input, [
  "YYYY-MM-DD HH:mm:ss",
  "YYYY-MM-DD",
  "MM/DD/YYYY",
  moment.ISO_8601
]).format("MM/DD/YYYY HH:mm:ss");
```

#### AppleScript Date Format
- **Required Format**: "MM/DD/YYYY HH:mm:ss" (US format)
- **Timezone**: Uses system local timezone
- **Validation**: Always validate dates before AppleScript execution

### Swift Integration Patterns

#### Binary Path Resolution
```typescript
// Auto-locate project root and binary path
const projectRoot = findProjectRoot(__filename);
const binaryPath = path.join(projectRoot, 'dist', 'swift', 'bin', 'GetReminders');

// Validate binary exists and is executable
if (!fs.existsSync(binaryPath)) {
  throw new Error('Swift binary not found. Run build script first.');
}
```

#### Child Process Execution
```typescript
// Spawn Swift binary with arguments
const process = spawn(binaryPath, args);
let stdout = '';

process.stdout.on('data', (data) => {
  stdout += data.toString();
});

process.on('close', (code) => {
  if (code !== 0) {
    reject(new Error(`Swift process failed: ${code}`));
  }
  resolve(parseSwiftOutput(stdout));
});
```

### Testing & Debugging

#### Test Environment Setup
```typescript
// Skip Swift binary in tests
if (process.env.NODE_ENV === 'test') {
  this.binaryPath = '/mock/path/to/binary';
  return;
}
```

#### Debug Logging
```typescript
import { debugLog } from "./utils/logger.js";

// Use consistent debug logging
debugLog("Swift binary args:", args);
debugLog("Parsed reminders:", reminders.length);
```

#### Jest Configuration
- **Preset**: ts-jest for TypeScript support
- **Environment**: Node.js
- **Setup**: Custom test setup in `src/test-setup.ts`
- **Mocks**: Mock Swift binaries and AppleScript in tests

## Build & Deployment

### Build Scripts
```bash
# TypeScript compilation
npm run build:ts          # tsc compilation to dist/

# Swift compilation  
npm run build:swift       # Compile Swift binary to dist/swift/bin/

# Development mode
npm run dev              # TypeScript watch mode

# Testing
npm test                 # Run Jest test suite
```

### Swift Build Process
```bash
#!/bin/bash
# src/swift/build.sh
swiftc -o bin/GetReminders GetReminders.swift -framework EventKit -framework Foundation
```

### Distribution
- **Binary**: `mcp-server-apple-reminders` (global npm install)
- **Entry Point**: `dist/index.js` with Node.js shebang
- **Dependencies**: Includes compiled Swift binary in distribution

## Integration Patterns

### Cursor IDE Configuration
```json
{
  "mcpServers": {
    "apple-reminders": {
      "command": "mcp-server-apple-reminders",
      "args": []
    }
  }
}
```

### Claude Desktop Configuration  
```json
{
  "mcpServers": {
    "apple-reminders": {
      "command": "mcp-server-apple-reminders", 
      "args": []
    }
  }
}
```

### Natural Language Examples
- "Create a reminder to buy groceries for tomorrow at 5 PM"
- "Show me all reminders in my Work list"
- "List my completed reminders"
- "Add a reminder to call mom with a note about weekend plans"

## Common Issues & Solutions

### Permission Problems
- **Issue**: "Access denied to reminders"
- **Solution**: Grant EventKit permission in System Preferences → Security & Privacy

### Swift Compilation Errors
- **Issue**: "Swift binary not found"
- **Solution**: Install Xcode Command Line Tools: `xcode-select --install`

### AppleScript Failures
- **Issue**: "Automation not allowed"
- **Solution**: Enable Terminal/Application in System Preferences → Automation

### Date Parsing Issues
- **Issue**: Invalid date formats
- **Solution**: Use Moment.js with multiple format arrays for flexibility

## Performance Considerations

### Async Operations
- Swift binary execution is asynchronous via child processes
- Use Promise-based patterns for consistency
- Implement proper error handling for all async operations

### Memory Management
- Clean up child processes properly
- Avoid memory leaks in long-running server instances
- Use streaming for large reminder datasets

### Caching Strategy
- Consider caching reminder lists for frequently accessed data
- Invalidate cache when reminders are modified
- Balance freshness vs. performance

## Security Guidelines

### Input Validation
- Always validate user inputs with Zod schemas
- Sanitize strings for AppleScript injection
- Validate date formats before processing

### Process Security
- Use spawn() instead of exec() for better security
- Validate Swift binary path and permissions
- Implement timeout mechanisms for child processes

### macOS Permissions
- Request minimal necessary permissions
- Handle permission denial gracefully
- Provide clear error messages for permission issues

## Future Considerations

### Potential Enhancements
- Support for reminder priorities and tags
- Bulk operations (create/update multiple reminders)
- Reminder search and filtering capabilities
- Integration with other Apple productivity apps

### Architecture Improvements
- Consider pure Swift implementation for better performance
- Implement caching layer for frequently accessed data
- Add support for real-time reminder updates via EventKit observers

### MCP Protocol Evolution
- Stay updated with MCP specification changes
- Consider implementing additional MCP capabilities (resources, prompts)
- Evaluate streaming responses for large datasets 