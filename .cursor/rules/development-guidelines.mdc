---
alwaysApply: true
description: General development guidelines and best practices for Apple Reminders MCP Server
---

# Development Guidelines

## Project Overview

This is an **Apple Reminders MCP Server** that provides native macOS integration through a dual-strategy architecture:
- **Read**: Swift + EventKit for performance
- **Write**: AppleScript for compatibility

## Essential Commands

```bash
# Build project (REQUIRED before starting)
npm run build

# Development mode
npm run dev

# Run tests
npm test

# Start server
npm start
```

## Code Quality Standards

### Linting & Formatting
- **Biome**: Configured in [biome.json](mdc:biome.json)
- **Indentation**: 2 spaces
- **Quotes**: Single quotes
- **Imports**: Auto-organized
- **Run**: `pnpm exec biome check` before commits

### TypeScript Standards
- **Strict Mode**: Enabled in [tsconfig.json](mdc:tsconfig.json)
- **Target**: ES2020 with NodeNext modules
- **Types**: Comprehensive type coverage required
- **Validation**: Zod schemas for runtime validation

## Architecture Principles

### Clean Architecture
- **Separation of Concerns**: Server, Tools, Utils, Validation layers
- **Dependency Injection**: Testable and maintainable code
- **Single Responsibility**: Each module has one clear purpose

### MCP Protocol Compliance
- **Tool Definitions**: Action-based design with comprehensive schemas
- **Error Handling**: Consistent error responses
- **Input Validation**: All inputs validated with Zod
- **Response Format**: Standardized MCP response structure

## Development Workflow

### 1. Setup
```bash
# Install dependencies
npm install

# Build project (REQUIRED)
npm run build

# Verify Swift binary
ls -la dist/swift/bin/GetReminders
```

### 2. Development
```bash
# Terminal 1: Watch mode
npm run dev

# Terminal 2: Server
npm start
```

### 3. Testing
```bash
# Run all tests
npm test

# Watch mode
npm test -- --watch

# Specific test
npm test -- handlers.test.ts
```

### 4. Quality Checks
```bash
# Lint check
pnpm exec biome check

# Type check
npx tsc --noEmit

# Test coverage
npm test -- --coverage
```

## File Organization

### Source Structure
```
src/
├── index.ts              # Entry point
├── server/               # MCP server implementation
├── tools/                # Tool definitions and handlers
├── utils/                # Helper functions
├── types/                # TypeScript definitions
├── validation/           # Zod schemas
└── swift/               # Native Swift integration
```

### Test Structure
- **Co-locate**: `*.test.ts` files next to source
- **Mocks**: `src/utils/__mocks__/` for external dependencies
- **Coverage**: Aim for 80%+ on critical logic

## Security Guidelines

### Input Validation
- **All inputs**: Must pass Zod schema validation
- **Text patterns**: Use SAFE_TEXT_PATTERN for AppleScript safety
- **URL validation**: Prevent SSRF attacks
- **Length limits**: Enforce maximum lengths

### Error Handling
- **No sensitive data**: In error messages
- **Consistent format**: Standard error response structure
- **Graceful degradation**: Handle missing dependencies

## Performance Considerations

### Swift Binary
- **Compile once**: Binary reused across requests
- **Path resolution**: Cached binary path lookup
- **Error handling**: Clear messages for missing binary

### AppleScript
- **Minimal execution**: Only for write operations
- **Error handling**: Proper AppleScript error parsing
- **Security**: Safe text patterns for injection prevention

## Testing Strategy

### Test Categories
- **Unit Tests**: Individual functions and methods
- **Integration Tests**: Component interactions
- **End-to-End**: Complete MCP tool workflows

### Mock Strategy
- **External dependencies**: Mock Swift binary and AppleScript
- **Repository pattern**: Mock data access layer
- **Environment**: Test-specific configuration

## Deployment Checklist

### Pre-deployment
- [ ] All tests pass (`npm test`)
- [ ] Linting passes (`pnpm exec biome check`)
- [ ] TypeScript compiles (`npx tsc --noEmit`)
- [ ] Swift binary builds (`npm run build:swift`)
- [ ] Documentation updated

### Production Build
- [ ] Clean build (`rm -rf dist/ && npm run build`)
- [ ] Binary exists (`ls -la dist/swift/bin/GetReminders`)
- [ ] Server starts (`npm start`)
- [ ] MCP tools respond correctly

## Troubleshooting

### Common Issues
1. **Binary not found**: Run `npm run build` first
2. **Permission denied**: Check Calendar/Reminders access
3. **TypeScript errors**: Check `tsconfig.json` configuration
4. **Test failures**: Verify mock setup in `__mocks__/`

### Debug Mode
```bash
# Enable debug logging
export DEBUG=mcp-server-apple-reminders:*

# Start server with debug
npm start
```

## Contributing Guidelines

### Code Style
- Follow existing patterns and conventions
- Use descriptive variable and function names
- Add JSDoc comments for public functions
- Keep functions under 50 lines when possible

### Commit Messages
- Use conventional commits format
- Keep titles under 50 characters
- Include scope when relevant: `feat(server): add new tool handler`

### Pull Requests
- Reference related issues
- Include test coverage
- Update documentation
- Pass all quality checks