---
alwaysApply: true
description: Comprehensive development guide for MCP Apple Reminders server project
---

# MCP Apple Reminders Server Development Guide

## Project Overview
This is a TypeScript-based MCP (Model Context Protocol) server providing native integration with macOS Apple Reminders using AppleScript and Swift. The server enables AI assistants to interact with Apple Reminders through a standardized protocol.

## Core Architecture

### Entry Points & Structure
- **[src/index.ts](mdc:src/index.ts)** - Main server entry point and initialization
- **[src/server/server.ts](mdc:src/server/server.ts)** - MCP server configuration and lifecycle management
- **[src/tools/definitions.ts](mdc:src/tools/definitions.ts)** - MCP tool specifications and schemas
- **[src/types/index.ts](mdc:src/types/index.ts)** - Core type definitions and interfaces

### Key Components
- **Tools**: [src/tools/](mdc:src/tools/) - MCP tool definitions, handlers, and registration
- **Server**: [src/server/](mdc:src/server/) - MCP server setup and request processing
- **Utils**: [src/utils/](mdc:src/utils/) - Repository pattern, AppleScript builders, error handling utilities
- **Swift**: [src/swift/](mdc:src/swift/) - Native performance-critical operations and system integration

## Development Workflow

### Build & Run Commands
```bash
npm run build        # Build both Swift and TypeScript components
npm run dev          # Development mode with file watching
npm start           # Run production server
npm test            # Execute comprehensive test suite
```

### Adding New Tools
1. Define tool schema in [src/tools/definitions.ts](mdc:src/tools/definitions.ts) using Zod validation
2. Implement handler logic in [src/tools/handlers.ts](mdc:src/tools/handlers.ts)
3. Register tool in [src/tools/index.ts](mdc:src/tools/index.ts)
4. Add TypeScript types in [src/types/index.ts](mdc:src/types/index.ts)
5. Write comprehensive tests in corresponding `.test.ts` files

### Modifying Existing Features
1. Search existing patterns: `grep -r "pattern" src/` to understand current implementation
2. Follow established conventions for error handling and logging
3. Update tests to maintain coverage and validate new functionality
4. Run full test suite before committing changes

## Code Quality Standards

### TypeScript Best Practices
- Use strict typing with comprehensive type coverage, avoid `any` type
- Prefer interfaces over type aliases for object definitions
- Export types explicitly with `export type` for better API documentation
- Implement proper generic constraints and utility types
- Use discriminated unions for complex state management

### Error Handling Patterns
- Use `handleAsyncOperation` wrapper for all async operations
- Return standardized error responses with consistent structure
- Implement comprehensive logging with `debugLog` utility
- Validate all inputs using Zod schemas in tool definitions
- Handle both expected and unexpected error scenarios gracefully

### Architecture Patterns
- **Repository Pattern**: Abstract data access layer in [src/utils/reminderRepository.ts](mdc:src/utils/reminderRepository.ts)
- **Builder Pattern**: AppleScript construction in [src/utils/appleScriptBuilders.ts](mdc:src/utils/appleScriptBuilders.ts)
- **Strategy Pattern**: Reminder organization logic in [src/utils/organizationStrategies.ts](mdc:src/utils/organizationStrategies.ts)

## File Organization Standards
- One tool class per file with single responsibility principle
- Group related functionality in dedicated directories
- Test files alongside source files with `.test.ts` extension
- Consistent naming: PascalCase for classes, camelCase for functions/variables
- Clear separation between utilities, tools, and server logic

## Technology Stack
- **Runtime**: Node.js with TypeScript for type safety
- **Protocol**: MCP SDK for standardized AI integration
- **System Integration**: AppleScript for macOS automation, Swift for performance-critical operations
- **Validation**: Zod schemas for runtime type validation
- **Testing**: Jest framework with comprehensive test coverage
- **Package Management**: pnpm for efficient dependency management

## Key Design Principles

### 1. Type Safety First
Complete TypeScript coverage with strict typing prevents runtime errors and improves developer experience. All data structures, function parameters, and return values must be properly typed.

### 2. Error Boundaries
Unified error handling with consistent response formats. All operations wrapped in error boundaries with meaningful error messages and proper logging.

### 3. Modularity
Clear separation of concerns with dedicated modules for tools, utilities, server logic, and system integration. Each component has a single, well-defined responsibility.

### 4. Performance Optimization
Swift binaries handle performance-critical operations while TypeScript manages business logic and MCP protocol compliance.

### 5. Maintainability
Consistent patterns, comprehensive documentation, and automated testing ensure long-term maintainability and ease of onboarding new developers.

## Common Development Tasks

### Tool Development Workflow
- Follow MCP specification for tool definitions with proper JSON schemas
- Implement comprehensive input validation using Zod
- Handle all error scenarios with graceful degradation
- Return consistent response formats matching MCP protocol
- Write integration tests covering success and failure scenarios

### Data Operations Guidelines
- Use Repository pattern for all data access operations
- Implement proper error handling and detailed logging
- Validate all inputs and outputs at runtime
- Maintain data consistency across create, read, update, delete operations
- Use transactions for multi-step operations when necessary

### Testing Strategy
- Write tests for all core functionality following TDD approach
- Mock external dependencies (AppleScript, Swift binaries) appropriately
- Test both success and error scenarios comprehensively
- Maintain high test coverage (>80%) across all modules
- Include integration tests for end-to-end functionality

## Development Environment Setup

### Prerequisites
- Node.js 18+ with npm or pnpm
- Xcode Command Line Tools (for Swift compilation)
- macOS (for Apple Reminders integration)

### Local Development
- Use `npm run dev` for development with hot reloading
- Run tests with `npm test` before committing
- Use `npm run build` to verify production build
- Debug with integrated logging and error reporting

## Code Review Guidelines
- Ensure all new code follows established patterns
- Verify comprehensive test coverage for new features
- Check TypeScript strict compliance
- Validate error handling and logging implementation
- Confirm adherence to architecture patterns and principles