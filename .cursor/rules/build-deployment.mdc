---
description: Build and deployment workflow for Apple Reminders MCP Server
---

# Build & Deployment Workflow

## Build System Overview

This project uses a **dual-build system**:
- **TypeScript**: Compiles to JavaScript in `dist/`
- **Swift**: Compiles to native binary in `dist/swift/bin/GetReminders`

## Build Commands

Based on [package.json](mdc:package.json) scripts:

```bash
# Full build (REQUIRED before starting server)
npm run build

# TypeScript only
npm run build:ts

# Swift binary only  
npm run build:swift

# Development mode (watch)
npm run dev

# Start server
npm start
```

## Build Process Details

### 1. Swift Binary Build
```bash
# Executes src/swift/build.sh
src/swift/build.sh && mkdir -p dist/swift/bin && cp -p src/swift/bin/GetReminders dist/swift/bin/GetReminders
```

**Requirements**:
- Xcode Command Line Tools installed
- macOS system (EventKit framework)
- Swift compiler available

**Output**: `dist/swift/bin/GetReminders` executable

### 2. TypeScript Build
```bash
# Executes tsc with tsconfig.json configuration
tsc
```

**Configuration**: [tsconfig.json](mdc:tsconfig.json)
- Target: ES2020
- Module: NodeNext
- Output: `dist/` directory
- Source maps: Enabled
- Declarations: Generated

## Development Workflow

### Local Development
```bash
# 1. Install dependencies
npm install

# 2. Build project (REQUIRED)
npm run build

# 3. Start development server
npm start

# 4. For active development (watch mode)
npm run dev  # Terminal 1: TypeScript watch
npm start    # Terminal 2: Server
```

### Testing Workflow
```bash
# Run tests
npm test

# Watch mode testing
npm test -- --watch

# Specific test file
npm test -- handlers.test.ts
```

## Deployment Considerations

### Prerequisites
- **Node.js 18+** on target system
- **macOS** (required for Apple Reminders integration)
- **Xcode Command Line Tools** (for Swift compilation)

### Production Build
```bash
# Clean build
rm -rf dist/
npm run build

# Verify binary exists
ls -la dist/swift/bin/GetReminders

# Test server startup
npm start
```

### Binary Path Resolution

The server uses multiple fallback paths for the Swift binary:
1. `dist/swift/bin/GetReminders` (production)
2. `src/swift/bin/GetReminders` (development)
3. `swift/bin/GetReminders` (legacy)

**Implementation**: [src/utils/binaryPathInitializer.ts](mdc:src/utils/binaryPathInitializer.ts)

## Environment Configuration

### Development Environment
```bash
# Set development mode
export NODE_ENV=development

# Enable debug logging
export DEBUG=mcp-server-apple-reminders:*
```

### Test Environment
```bash
# Set test mode (uses mocks)
export NODE_ENV=test
```

### Production Environment
```bash
# Set production mode
export NODE_ENV=production
```

## Package Distribution

### NPM Package Structure
```
mcp-server-apple-reminders/
├── dist/                    # Compiled output
│   ├── index.js            # Main entry point
│   ├── swift/bin/          # Swift binary
│   └── **/*.js             # Compiled TypeScript
├── package.json            # Package metadata
└── README.md               # Documentation
```

### Installation
```bash
# Global installation
npm install -g mcp-server-apple-reminders

# Local installation
npm install mcp-server-apple-reminders
```

## Troubleshooting Build Issues

### Swift Build Failures
```bash
# Check Xcode Command Line Tools
xcode-select --print-path

# Install if missing
xcode-select --install

# Verify Swift compiler
swift --version
```

### TypeScript Build Failures
```bash
# Check TypeScript installation
npx tsc --version

# Clean and rebuild
rm -rf dist/ node_modules/
npm install
npm run build
```

### Binary Not Found Errors
```bash
# Verify binary exists
ls -la dist/swift/bin/GetReminders

# Check permissions
chmod +x dist/swift/bin/GetReminders

# Rebuild if missing
npm run build:swift
```

## Performance Considerations

### Build Optimization
- **TypeScript**: Use `skipLibCheck: true` for faster builds
- **Swift**: Binary is compiled once and reused
- **Dependencies**: Minimize production dependencies

### Runtime Performance
- **Swift Binary**: Used for read operations (EventKit)
- **AppleScript**: Used for write operations
- **Caching**: Binary path resolution is cached

## Security Considerations

### Build Security
- **Dependencies**: Regular `npm audit` checks
- **Binary**: Swift binary is compiled from source
- **Validation**: Input validation with Zod schemas

### Runtime Security
- **Permissions**: Requires Calendar/Reminders access
- **Input Sanitization**: All inputs validated
- **Error Handling**: No sensitive data in error messages